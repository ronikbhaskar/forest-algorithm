import numpy as np
from collections import defaultdict

EMPTY = 0
X = 1
O = 2

WINNING_PATTERNS = np.array(
    [
        [0, 1, 2, 3],
        [4, 5, 6, 7],
        [8, 9, 10, 11],
        [12, 13, 14, 15],
        [0, 4, 8, 12],
        [1, 5, 9, 13],
        [2, 6, 10, 14],
        [3, 7, 11, 15],
        [0, 5, 10, 15],
        [1, 6, 11, 12],
        [2, 7, 8, 13],
        [3, 4, 9, 14],
        [3, 6, 9, 12],
        [2, 8, 8, 15],
        [1, 4, 11, 14],
        [0, 7, 10, 13]
    ],
    dtype=np.int8
)

EQUIV_CLASSES = np.array(
    [
        [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],
        [3, 0, 1, 2, 7, 4, 5, 6, 11, 8, 9, 10, 15, 12, 13, 14],
        [2, 3, 0, 1, 6, 7, 4, 5, 10, 11, 8, 9, 14, 15, 12, 13],
        [1, 2, 3, 0, 5, 6, 7, 4, 9, 10, 11, 8, 13, 14, 15, 12],
        [12, 13, 14, 15, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11],
        [15, 12, 13, 14, 3, 0, 1, 2, 7, 4, 5, 6, 11, 8, 9, 10],
        [14, 15, 12, 13, 2, 3, 0, 1, 6, 7, 4, 5, 10, 11, 8, 9],
        [13, 14, 15, 12, 1, 2, 3, 0, 5, 6, 7, 4, 9, 10, 11, 8],
        [8, 9, 10, 11, 12, 13, 14, 15, 0, 1, 2, 3, 4, 5, 6, 7],
        [11, 8, 9, 10, 15, 12, 13, 14, 3, 0, 1, 2, 7, 4, 5, 6],
        [10, 11, 8, 9, 14, 15, 12, 13, 2, 3, 0, 1, 6, 7, 4, 5],
        [9, 10, 11, 8, 13, 14, 15, 12, 1, 2, 3, 0, 5, 6, 7, 4],
        [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0, 1, 2, 3],
        [7, 4, 5, 6, 11, 8, 9, 10, 15, 12, 13, 14, 3, 0, 1, 2],
        [6, 7, 4, 5, 10, 11, 8, 9, 14, 15, 12, 13, 2, 3, 0, 1],
        [5, 6, 7, 4, 9, 10, 11, 8, 13, 14, 15, 12, 1, 2, 3, 0],
        [12, 8, 4, 0, 13, 9, 5, 1, 14, 10, 6, 2, 15, 11, 7, 3],
        [0, 12, 8, 4, 1, 13, 9, 5, 2, 14, 10, 6, 3, 15, 11, 7],
        [4, 0, 12, 8, 5, 1, 13, 9, 6, 2, 14, 10, 7, 3, 15, 11],
        [8, 4, 0, 12, 9, 5, 1, 13, 10, 6, 2, 14, 11, 7, 3, 15],
        [15, 11, 7, 3, 12, 8, 4, 0, 13, 9, 5, 1, 14, 10, 6, 2],
        [3, 15, 11, 7, 0, 12, 8, 4, 1, 13, 9, 5, 2, 14, 10, 6],
        [7, 3, 15, 11, 4, 0, 12, 8, 5, 1, 13, 9, 6, 2, 14, 10],
        [11, 7, 3, 15, 8, 4, 0, 12, 9, 5, 1, 13, 10, 6, 2, 14],
        [14, 10, 6, 2, 15, 11, 7, 3, 12, 8, 4, 0, 13, 9, 5, 1],
        [2, 14, 10, 6, 3, 15, 11, 7, 0, 12, 8, 4, 1, 13, 9, 5],
        [6, 2, 14, 10, 7, 3, 15, 11, 4, 0, 12, 8, 5, 1, 13, 9],
        [10, 6, 2, 14, 11, 7, 3, 15, 8, 4, 0, 12, 9, 5, 1, 13],
        [13, 9, 5, 1, 14, 10, 6, 2, 15, 11, 7, 3, 12, 8, 4, 0],
        [1, 13, 9, 5, 2, 14, 10, 6, 3, 15, 11, 7, 0, 12, 8, 4],
        [5, 1, 13, 9, 6, 2, 14, 10, 7, 3, 15, 11, 4, 0, 12, 8],
        [9, 5, 1, 13, 10, 6, 2, 14, 11, 7, 3, 15, 8, 4, 0, 12],
        [15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0],
        [12, 15, 14, 13, 8, 11, 10, 9, 4, 7, 6, 5, 0, 3, 2, 1],
        [13, 12, 15, 14, 9, 8, 11, 10, 5, 4, 7, 6, 1, 0, 3, 2],
        [14, 13, 12, 15, 10, 9, 8, 11, 6, 5, 4, 7, 2, 1, 0, 3],
        [3, 2, 1, 0, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4],
        [0, 3, 2, 1, 12, 15, 14, 13, 8, 11, 10, 9, 4, 7, 6, 5],
        [1, 0, 3, 2, 13, 12, 15, 14, 9, 8, 11, 10, 5, 4, 7, 6],
        [2, 1, 0, 3, 14, 13, 12, 15, 10, 9, 8, 11, 6, 5, 4, 7],
        [7, 6, 5, 4, 3, 2, 1, 0, 15, 14, 13, 12, 11, 10, 9, 8],
        [4, 7, 6, 5, 0, 3, 2, 1, 12, 15, 14, 13, 8, 11, 10, 9],
        [5, 4, 7, 6, 1, 0, 3, 2, 13, 12, 15, 14, 9, 8, 11, 10],
        [6, 5, 4, 7, 2, 1, 0, 3, 14, 13, 12, 15, 10, 9, 8, 11],
        [11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 15, 14, 13, 12],
        [8, 11, 10, 9, 4, 7, 6, 5, 0, 3, 2, 1, 12, 15, 14, 13],
        [9, 8, 11, 10, 5, 4, 7, 6, 1, 0, 3, 2, 13, 12, 15, 14],
        [10, 9, 8, 11, 6, 5, 4, 7, 2, 1, 0, 3, 14, 13, 12, 15],
        [3, 7, 11, 15, 2, 6, 10, 14, 1, 5, 9, 13, 0, 4, 8, 12],
        [15, 3, 7, 11, 14, 2, 6, 10, 13, 1, 5, 9, 12, 0, 4, 8],
        [11, 15, 3, 7, 10, 14, 2, 6, 9, 13, 1, 5, 8, 12, 0, 4],
        [7, 11, 15, 3, 6, 10, 14, 2, 5, 9, 13, 1, 4, 8, 12, 0],
        [0, 4, 8, 12, 3, 7, 11, 15, 2, 6, 10, 14, 1, 5, 9, 13],
        [12, 0, 4, 8, 15, 3, 7, 11, 14, 2, 6, 10, 13, 1, 5, 9],
        [8, 12, 0, 4, 11, 15, 3, 7, 10, 14, 2, 6, 9, 13, 1, 5],
        [4, 8, 12, 0, 7, 11, 15, 3, 6, 10, 14, 2, 5, 9, 13, 1],
        [1, 5, 9, 13, 0, 4, 8, 12, 3, 7, 11, 15, 2, 6, 10, 14],
        [13, 1, 5, 9, 12, 0, 4, 8, 15, 3, 7, 11, 14, 2, 6, 10],
        [9, 13, 1, 5, 8, 12, 0, 4, 11, 15, 3, 7, 10, 14, 2, 6],
        [5, 9, 13, 1, 4, 8, 12, 0, 7, 11, 15, 3, 6, 10, 14, 2],
        [2, 6, 10, 14, 1, 5, 9, 13, 0, 4, 8, 12, 3, 7, 11, 15],
        [14, 2, 6, 10, 13, 1, 5, 9, 12, 0, 4, 8, 15, 3, 7, 11],
        [10, 14, 2, 6, 9, 13, 1, 5, 8, 12, 0, 4, 11, 15, 3, 7],
        [6, 10, 14, 2, 5, 9, 13, 1, 4, 8, 12, 0, 7, 11, 15, 3],
        [3, 2, 1, 0, 7, 6, 5, 4, 11, 10, 9, 8, 15, 14, 13, 12],
        [0, 3, 2, 1, 4, 7, 6, 5, 8, 11, 10, 9, 12, 15, 14, 13],
        [1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14],
        [2, 1, 0, 3, 6, 5, 4, 7, 10, 9, 8, 11, 14, 13, 12, 15],
        [15, 14, 13, 12, 3, 2, 1, 0, 7, 6, 5, 4, 11, 10, 9, 8],
        [12, 15, 14, 13, 0, 3, 2, 1, 4, 7, 6, 5, 8, 11, 10, 9],
        [13, 12, 15, 14, 1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10],
        [14, 13, 12, 15, 2, 1, 0, 3, 6, 5, 4, 7, 10, 9, 8, 11],
        [11, 10, 9, 8, 15, 14, 13, 12, 3, 2, 1, 0, 7, 6, 5, 4],
        [8, 11, 10, 9, 12, 15, 14, 13, 0, 3, 2, 1, 4, 7, 6, 5],
        [9, 8, 11, 10, 13, 12, 15, 14, 1, 0, 3, 2, 5, 4, 7, 6],
        [10, 9, 8, 11, 14, 13, 12, 15, 2, 1, 0, 3, 6, 5, 4, 7],
        [7, 6, 5, 4, 11, 10, 9, 8, 15, 14, 13, 12, 3, 2, 1, 0],
        [4, 7, 6, 5, 8, 11, 10, 9, 12, 15, 14, 13, 0, 3, 2, 1],
        [5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14, 1, 0, 3, 2],
        [6, 5, 4, 7, 10, 9, 8, 11, 14, 13, 12, 15, 2, 1, 0, 3],
        [15, 11, 7, 3, 14, 10, 6, 2, 13, 9, 5, 1, 12, 8, 4, 0],
        [3, 15, 11, 7, 2, 14, 10, 6, 1, 13, 9, 5, 0, 12, 8, 4],
        [7, 3, 15, 11, 6, 2, 14, 10, 5, 1, 13, 9, 4, 0, 12, 8],
        [11, 7, 3, 15, 10, 6, 2, 14, 9, 5, 1, 13, 8, 4, 0, 12],
        [12, 8, 4, 0, 15, 11, 7, 3, 14, 10, 6, 2, 13, 9, 5, 1],
        [0, 12, 8, 4, 3, 15, 11, 7, 2, 14, 10, 6, 1, 13, 9, 5],
        [4, 0, 12, 8, 7, 3, 15, 11, 6, 2, 14, 10, 5, 1, 13, 9],
        [8, 4, 0, 12, 11, 7, 3, 15, 10, 6, 2, 14, 9, 5, 1, 13],
        [13, 9, 5, 1, 12, 8, 4, 0, 15, 11, 7, 3, 14, 10, 6, 2],
        [1, 13, 9, 5, 0, 12, 8, 4, 3, 15, 11, 7, 2, 14, 10, 6],
        [5, 1, 13, 9, 4, 0, 12, 8, 7, 3, 15, 11, 6, 2, 14, 10],
        [9, 5, 1, 13, 8, 4, 0, 12, 11, 7, 3, 15, 10, 6, 2, 14],
        [14, 10, 6, 2, 13, 9, 5, 1, 12, 8, 4, 0, 15, 11, 7, 3],
        [2, 14, 10, 6, 1, 13, 9, 5, 0, 12, 8, 4, 3, 15, 11, 7],
        [6, 2, 14, 10, 5, 1, 13, 9, 4, 0, 12, 8, 7, 3, 15, 11],
        [10, 6, 2, 14, 9, 5, 1, 13, 8, 4, 0, 12, 11, 7, 3, 15],
        [12, 13, 14, 15, 8, 9, 10, 11, 4, 5, 6, 7, 0, 1, 2, 3],
        [15, 12, 13, 14, 11, 8, 9, 10, 7, 4, 5, 6, 3, 0, 1, 2],
        [14, 15, 12, 13, 10, 11, 8, 9, 6, 7, 4, 5, 2, 3, 0, 1],
        [13, 14, 15, 12, 9, 10, 11, 8, 5, 6, 7, 4, 1, 2, 3, 0],
        [0, 1, 2, 3, 12, 13, 14, 15, 8, 9, 10, 11, 4, 5, 6, 7],
        [3, 0, 1, 2, 15, 12, 13, 14, 11, 8, 9, 10, 7, 4, 5, 6],
        [2, 3, 0, 1, 14, 15, 12, 13, 10, 11, 8, 9, 6, 7, 4, 5],
        [1, 2, 3, 0, 13, 14, 15, 12, 9, 10, 11, 8, 5, 6, 7, 4],
        [4, 5, 6, 7, 0, 1, 2, 3, 12, 13, 14, 15, 8, 9, 10, 11],
        [7, 4, 5, 6, 3, 0, 1, 2, 15, 12, 13, 14, 11, 8, 9, 10],
        [6, 7, 4, 5, 2, 3, 0, 1, 14, 15, 12, 13, 10, 11, 8, 9],
        [5, 6, 7, 4, 1, 2, 3, 0, 13, 14, 15, 12, 9, 10, 11, 8],
        [8, 9, 10, 11, 4, 5, 6, 7, 0, 1, 2, 3, 12, 13, 14, 15],
        [11, 8, 9, 10, 7, 4, 5, 6, 3, 0, 1, 2, 15, 12, 13, 14],
        [10, 11, 8, 9, 6, 7, 4, 5, 2, 3, 0, 1, 14, 15, 12, 13],
        [9, 10, 11, 8, 5, 6, 7, 4, 1, 2, 3, 0, 13, 14, 15, 12],
        [0, 4, 8, 12, 1, 5, 9, 13, 2, 6, 10, 14, 3, 7, 11, 15],
        [12, 0, 4, 8, 13, 1, 5, 9, 14, 2, 6, 10, 15, 3, 7, 11],
        [8, 12, 0, 4, 9, 13, 1, 5, 10, 14, 2, 6, 11, 15, 3, 7],
        [4, 8, 12, 0, 5, 9, 13, 1, 6, 10, 14, 2, 7, 11, 15, 3],
        [3, 7, 11, 15, 0, 4, 8, 12, 1, 5, 9, 13, 2, 6, 10, 14],
        [15, 3, 7, 11, 12, 0, 4, 8, 13, 1, 5, 9, 14, 2, 6, 10],
        [11, 15, 3, 7, 8, 12, 0, 4, 9, 13, 1, 5, 10, 14, 2, 6],
        [7, 11, 15, 3, 4, 8, 12, 0, 5, 9, 13, 1, 6, 10, 14, 2],
        [2, 6, 10, 14, 3, 7, 11, 15, 0, 4, 8, 12, 1, 5, 9, 13],
        [14, 2, 6, 10, 15, 3, 7, 11, 12, 0, 4, 8, 13, 1, 5, 9],
        [10, 14, 2, 6, 11, 15, 3, 7, 8, 12, 0, 4, 9, 13, 1, 5],
        [6, 10, 14, 2, 7, 11, 15, 3, 4, 8, 12, 0, 5, 9, 13, 1],
        [1, 5, 9, 13, 2, 6, 10, 14, 3, 7, 11, 15, 0, 4, 8, 12],
        [13, 1, 5, 9, 14, 2, 6, 10, 15, 3, 7, 11, 12, 0, 4, 8],
        [9, 13, 1, 5, 10, 14, 2, 6, 11, 15, 3, 7, 8, 12, 0, 4],
        [5, 9, 13, 1, 6, 10, 14, 2, 7, 11, 15, 3, 4, 8, 12, 0],
    ],
    dtype=np.int8
)

def blank_board():
    return np.zeros(16, dtype=np.int8)

def is_win(board, player):
    positions = board[WINNING_PATTERNS]
    return np.any(np.all(positions == player, axis=1))

def show_board(board):
    print(np.reshape(board, (4, 4)))

def make_move(board, move, player):
    board[move] = player

lookup = defaultdict(list)

# def find_all_moves(board, current_player, optimizing_player):

#     empty_exists = False

#     key = board.tobytes()

#     for i in range(16):
#         if board[i] == 0:
#             empty_exists = True
#             board[i] = current_player
#             if in_lookup(board, lookup):
#                 board[i] = EMPTY
#                 return lookup_board(board, lookup)[1]
#             elif is_win(board, current_player):
#                 score = 1 if optimizing_player == current_player else -1
#                 lookup[key].append((i, score))
#                 return score
            
#     if not empty_exists:
#         return 0
    
#     moves_scores = []
    
#     next_player = X if current_player == O else O
    
#     for i in range(16):
#         if board[i] == 0:
#             board[i] = current_player

#             moves_scores.append((i, find_all_moves(board, next_player, optimizing_player)))
            # board[i] = EMPTY

def next_moves(board, current_player):
    key = get_lookup_key(board)
    for i in range(16):
        if board[i] == EMPTY:
            lookup[key].append(i)
            board[i] = current_player
            next_moves(board, X if current_player != O else X)
            board[i] = EMPTY